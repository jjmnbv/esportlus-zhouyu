server:
  port: 9004
  # {@link https://github.com/undertow-io/undertow/blob/master/core/src/main/java/io/undertow/Undertow.java}
  undertow:
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
    # 每块buffer的空间大小,越小的空间被利用越充分，不要设置太大，以免影响其他应用，合适即可
    buffer-size: 1024
    # 是否分配的直接内存(NIO直接分配的堆外内存)
    direct-buffers: true
    # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
    # 不要设置过大，如果过大，启动项目会报错：打开文件数过多
    io-threads: 16
    # 阻塞任务线程池, 当执行类似servlet请求阻塞IO操作, undertow会从这个线程池中取得线程
    # 它的值设置取决于系统线程执行任务的阻塞系数，默认值是IO线程数*8
    worker-threads: 256

spring:
  application:
    name: esportingplus-trade-service
  profiles:
    active: @profile.env@
  cloud:
    config:
      #uri: http://localhost:8888
      fail-fast: true
      profile: @profile.env@
      label: @profile.env@
      username: ${security.user.name}
      password: ${security.user.password}
      retry:
        initial-interval: 2000
        max-interval: 10000
        multiplier: 2
        max-attempts: 10
      discovery:
        #从配置中心读取配置
        enabled: true
        serviceId: config-server

  jackson:
    time-zone: GMT+8 # 解决 jackson 转换的时候出现的时区问题
    date-format: yyyy-MM-dd HH:mm:ss # 日期格式化时使用 2018-01-01 23:59:01 的格式
    property-naming-strategy: SNAKE_CASE # 使用下划线方式格式化字段
    default-property-inclusion: NON_NULL # 忽略 null值

management:
  security:
    enabled: false

security:
  user:
    name: admin
    password: ${TRADE_SERVICE_PASSWORD:admin}

# 分布式ID配置
snowflake:
  #数据中心，按服务模块编号，0: 用户 1: 车队 2: 订单
  dataCenter: 2
  #机器编号, 同一个服务模块下值不能重复
  machine: 0

---
spring:
  profiles: dev

eureka:
  instance:
    #hostname: 127.0.0.1
    prefer-ip-address: true
    metadata-map:
      user.name: ${security.user.name}
      user.password: ${security.user.password}
  client:
    service-url:
      defaultZone: http://${security.user.name}:${security.user.password}@localhost:8761/eureka/

---
spring:
  profiles: test

eureka:
  instance:
    #hostname: 127.0.0.1
    prefer-ip-address: true
    metadata-map:
      user.name: ${security.user.name}
      user.password: ${security.user.password}
  client:
    service-url:
      defaultZone: ${eureka.client.service-url.defaultZone}

---
spring:
  profiles: grey

eureka:
  instance:
    #hostname: 127.0.0.1
    prefer-ip-address: true
    metadata-map:
      user.name: ${security.user.name}
      user.password: ${security.user.password}
  client:
    service-url:
      defaultZone: ${eureka.client.service-url.defaultZone}

---
spring:
  profiles: grey2

eureka:
  instance:
    #hostname: 127.0.0.1
    prefer-ip-address: true
    metadata-map:
      user.name: ${security.user.name}
      user.password: ${security.user.password}
  client:
    service-url:
      defaultZone: ${eureka.client.service-url.defaultZone}

---
spring:
  profiles: prod

eureka:
  instance:
    #hostname: 127.0.0.1
    prefer-ip-address: true
    metadata-map:
      user.name: ${security.user.name}
      user.password: ${security.user.password}
  client:
    service-url:
      defaultZone: ${eureka.client.service-url.defaultZone}


